---
layout: post
title:  "Performances Web “Put Scripts At The Bottom” Oui mais comment ?"
date:   2010-05-31 16:04:21 +0100
---

<h1>Put quoi ?</h1>
Il y a quelques années de ça, Yahoo! a découvert une règle de performance frontend qui a fait date, et qui fait toujours partie des must-have :

<a href="http://developer.yahoo.com/performance/rules.html#js_bottom" target="_blank">Put Scripts at the Bottom</a>

Plus tard Google PageSpeed a inclus la <a href="http://code.google.com/speed/page-speed/docs/payload.html#DeferLoadingJS">même règle</a>. De fait, une inclusion de JavaScript <strong>bloque tout rendu ET téléchargement</strong> durant le temps de téléchargement du fichier. Dans le cas d'une mauvaise connexion, vous pouvez même rester sur une <a href="http://www.stevesouders.com/blog/2010/06/01/frontend-spof/">page blanche</a> alors que la majorité de la page est téléchargée.
<p style="text-align: center;"><a href="http://developer.yahoo.com/performance/rules.html#js_bottom" target="_blank"> </a><a style="color: blue !important; text-decoration: underline !important; cursor: text !important;" href="http://jpv.typepad.com/.a/6a012875b0b7ba970c0133ef232d24970b-pi"><img class="asset asset-image at-xid-6a012875b0b7ba970c0133ef232d24970b " style="cursor: pointer !important; margin-left: auto; margin-right: auto; display: block; border: initial none initial;" title="Chart JS blocking images" src="http://jpv.typepad.com/.a/6a012875b0b7ba970c0133ef232d24970b-500pi" border="0" alt="Chart JS blocking images" /></a>Ici les images attendent le JS. <strong>Temps body.onload : 3.7s</strong>. (voir <a href="http://www.softwareishard.com/har/viewer/?inputUrl=http://www.showslow.com/details/har.php%3Fid%3D239%26callback%3DonInputData" target="_blank">toute la timeline</a>)</p>
<p style="text-align: left;">Cette règle est donc réellement à considérer dans le top 10 des modifications à apporter pour qu'un site semble plus réactif. Les développeurs qui ont vu ça ont fait le test de déplacer les balises &lt;<em>script</em>&gt; du &lt;<em>head</em>&gt; pour les mettre tout en bas de page ... pour se rendre compte que la page "cassait" et que des modifications de leurs scripts seraient trop pénibles à exécuter.</p>
<p style="text-align: left;"></p>

<h1>Objectif</h1>
Mon but était d'accélérer le rendu de la <a href="http://www.timeofmylife.com/?utm_source=jpv">homepage de mon projet actuel</a> pour les visiteurs sans cache. La page mettait <a href="http://www.softwareishard.com/har/viewer/?inputUrl=http://www.showslow.com/details/har.php%3Fid%3D232%26callback%3DonInputData">plus de 3s</a> avant que le DOM ne s'affiche, alors que le HTML était reçu en moins d'une demie seconde. Ayant la chance d'avoir la même problématique que Facebook (1 page de garde qui n'a que 3 fonctions : se loguer, s'enregistrer et parler du service), j'ai pu reporter le téléchargement de l'intro flash, réduire de moitié le poids total des JS et CSS et accélérer l'envoi des scripts avec du cache côté serveur. 60ko de JS ça reste lourd pour une seule page, et je pourrais faire encore plus spécifique, mais cela demande plus de temps et dans nos contrées ADSLisées le poids n'est plus le nerf de la guerre.

Ces modifs étaient plutôt lourdes et je leur ai consacré presque <strong>2 journées, sans gain sensible</strong>, alors que <strong>déplacer une inclusion de JS prend une minute</strong>. Il me fallait donc tenter quelque chose pour ce fichier JS inclus dans le &lt;<em>head</em>&gt;. Mon seul problème était les &lt;<em>script</em>&gt; inline qui se lançaient et qui dépendaient de ce fichier.
<p style="text-align: left;"></p>

<h1 style="text-align: left;">Pourquoi du Javascript inline ?</h1>
<p style="text-align: left;">Avant que vous ne criez au scandale, il faut savoir que ce site a été développé de manière modulaire : écrire des parties indépendantes de site qui peuvent être inclues n'importe où, y compris via XHR (dit AJAX). On est donc bien forcé à un moment de lancer le Javascript associé à un module et si vous regardez le code source, le JS inline ne fait qu'instancier les classes correspondantes aux modules inclus (login, animation, feedback ...). Pour les modules communs, cette partie de JS est dans le fichier principal (dans l'illustration plus haut, c'est celui de 67ko), pour d'autres plus exceptionnels répartis ailleurs sur le site dans des fichiers séparés qui ne sont appelés que lorsque le module est récupéré en AJAX (technique dite du <a style="color: blue !important; text-decoration: underline !important; cursor: text !important;" href="http://www.digital-web.com/articles/improve_page_performance_with_lazy_loading/" target="_blank">lazy-loading</a>) .</p>
<p style="text-align: left;">La concaténation (pour moins de requetes HTTP) et le lazy-loading (pour moins de poids initial) s'opposent mais lorsque l'on fait une quasi application web, il faut essayer de les doser pour obtenir le meilleur des 2 mondes. Dans l'un ou l'autre cas, le cache du navigateur rendra l'expérience fluide.</p>
<p style="text-align: left;">Voilà donc pourquoi on se retrouve à vouloir exécuter le code que l'on voulait justement inclure après.</p>
<p style="text-align: left;"></p>

<h1>Exécuter du code qui n'est pas là ?</h1>
La technique se déroule en 5 temps :
<ul>
  <li><strong>taire les erreurs JS</strong></li>
  <li>la page se charge, les JS inline se lancent et plantent en silence</li>
  <li>remettre le système d'erreur standard</li>
  <li>inclure le fichier</li>
  <li><strong>re-exécuter</strong> tous les scripts inline</li>
</ul>
<strong>Concrètement</strong>, dans le &lt;<em>head</em>&gt;, à la place du &lt;<em>script</em> <em>src</em>=""&gt; original :
<pre><span style="white-space: normal; font-size: 12px;"><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&lt;</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt; </span></span></span><span style="font-family: Courier;">
</span><span style="white-space: normal; font-size: 12px;"><span class="xml-punctuation" style="color: black;"><span style="line-height: 15px; color: #666666;"><span class="js-variable" style="color: black;"><span style="font-family: Courier;">window</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">defaultOnError </span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">= </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">window</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">onerror</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">;</span></span><span style="font-family: Courier;"> </span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">window</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">onerror </span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">= </span></span><span class="js-keyword" style="color: #770088;"><span style="font-family: Courier;">function</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">(</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">) </span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">{</span></span><span class="js-keyword" style="color: #770088;"><span style="font-family: Courier;">return </span></span><span class="js-atom" style="color: #228811;"><span style="font-family: Courier;">true</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">;</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">}</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">;</span></span><span style="font-family: Courier;"> </span></span><span style="font-family: Courier;">&lt;/</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt;</span></span><span class="xml-text" style="color: black;"><span style="font-family: Courier;">​</span></span></span></pre>
On a sauvegardé le gestionnaire d'erreur par défaut (<strong>window.onerror</strong>) pour plus tard et on définit à la place une fonction qui ne fait rien. Les erreurs n'arrivent plus jusqu'à l'utilisateur.

En bas de page, après &lt;/html&gt; :
<pre><span style="white-space: normal; font-size: 12px;"><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&lt;</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt;</span></span></span><span style="font-family: Courier;">
</span><span style="white-space: normal; font-size: 12px; color: #666666;"><span class="js-variable" style="color: black;"><span style="font-family: Courier;">window</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">onerror </span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">= </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">window</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">defaultOnError</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">;</span></span></span><span style="font-family: Courier;">
</span><span style="white-space: normal; font-size: 12px;"><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&lt;/</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt;</span></span><span class="xml-text" style="color: black;"><span style="font-family: Courier;">​</span></span></span><span style="font-family: Courier;">
</span><span style="white-space: normal; font-size: 12px;"><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&lt;</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script </span></span><span class="xml-attname" style="color: #0000ff;"><span style="font-family: Courier;">src</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">=</span></span><span class="xml-attribute" style="color: #228811;"><span style="font-family: Courier;">"http://example.com/my.js"</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt;</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&lt;/</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt;</span></span><span class="xml-text" style="color: black;"><span style="font-family: Courier;">​</span></span></span></pre>
On a remis le gestionnaire par défaut et on a inclus notre fichier JS qui ne gène plus personne. Ensuite on va retrouver les script inline pour les exécuter :
<pre><span style="white-space: normal; font-size: 12px;"><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&lt;</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt;</span></span></span><span style="font-family: Courier;">
</span><span style="white-space: normal; font-size: 12px; color: #666666;"><span class="js-keyword" style="color: #770088;"><span style="font-family: Courier;">var </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">aInlineJS </span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">=</span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">document</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">getElementById</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">(</span></span><span class="js-string" style="color: #aa2222;"><span style="font-family: Courier;">'container'</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">)</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">getElementByTagName</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">(</span></span><span class="js-string" style="color: #aa2222;"><span style="font-family: Courier;">'SCRIPT'</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">)</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">,</span></span><span style="font-family: Courier;"> </span><span class="whitespace"><span style="font-family: Courier;">    </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">iTotal </span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">= </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">aInlineJS</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">length</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">;</span></span><span style="font-family: Courier;"> </span><span class="js-keyword" style="color: #770088;"><span style="font-family: Courier;">for</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">(</span></span><span class="js-keyword" style="color: #770088;"><span style="font-family: Courier;">var </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">i</span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">=</span></span><span class="js-atom" style="color: #228811;"><span style="font-family: Courier;">0</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">; </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">i </span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">&lt; </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">iTotal</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">;</span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">i</span></span><span class="js-operator" style="color: #666666;"><span style="font-family: Courier;">++</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">) </span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">{</span></span><span style="font-family: Courier;"> </span><span class="whitespace"><span style="font-family: Courier;">    </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">eval</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">( </span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">oJscripts</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">[</span></span><span class="js-variable" style="color: black;"><span style="font-family: Courier;">i</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">]</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">.</span></span><span class="js-property" style="color: black;"><span style="font-family: Courier;">innerHTML </span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">)</span></span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">;</span></span><span style="font-family: Courier;"> </span><span class="js-punctuation" style="color: #666666;"><span style="font-family: Courier;">}</span></span></span><span style="font-family: Courier;">
</span><span style="white-space: normal; font-size: 12px;"><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&lt;/</span></span><span class="xml-tagname" style="color: #aa00bb;"><span style="font-family: Courier;">script</span></span><span class="xml-punctuation" style="color: black;"><span style="font-family: Courier;">&gt;</span></span></span></pre>
où <em>container</em> serait l'id de ma div principale. Ici on a :
<ul>
  <li>récupéré tous les éléments de type &lt;<em>script</em>&gt; de la page, qui ne sont pas nos 3 derniers éléments &lt;<em>script</em>&gt; (sinon attention aux boucles infinies)</li>
  <li>lancé un <em>eval</em> sur le contenu de chaque balise</li>
</ul>
Le vrai code est à peine plus long car il prévoit plus de cas, mais vous avez l'idée. Vous pouvez regarder le code dans la source de <a href="http://www.timeofmylife.com/?utm_source=jpv">cette homepage</a>. Voici notre nouvelle timeline :
<p style="text-align: center;"><a style="display: inline;" href="http://jpv.typepad.com/.a/6a012875b0b7ba970c0133ef236178970b-pi"><img class="asset asset-image at-xid-6a012875b0b7ba970c0133ef236178970b image-full " title="Chart JS non blocking images" src="http://jpv.typepad.com/.a/6a012875b0b7ba970c0133ef236178970b-800wi" border="0" alt="Chart JS non blocking images" /></a></p>
<p style="text-align: center;">Les images sont récupérées en même temps que le JS. Temps <strong>body.onload : 1.7s </strong>(<a style="color: blue !important; text-decoration: underline !important; cursor: text !important;" href="http://www.softwareishard.com/har/viewer/?inputUrl=http://www.showslow.com/details/har.php%3Fid%3D243%26callback%3DonInputData" target="_blank">voir la timeline complète</a>)</p>
Au bout de quelques semaines, Google aussi a la sensation que la page est plus rapide :

<a style="display: inline;" href="http://jpv.typepad.com/.a/6a012875b0b7ba970c0133f14824be970b-pi"><img class="asset asset-image at-xid-6a012875b0b7ba970c0133f14824be970b image-full " title="Google-perf-chart" src="http://jpv.typepad.com/.a/6a012875b0b7ba970c0133f14824be970b-800wi" border="0" alt="Google-perf-chart" /></a>

<strong>On a gagné :</strong>
<ul>
  <li><strong>2 secondes </strong>(50%), sur body.onload (on passe sous la barre arbitraire des 20% des sites les plus rapides choisie par <a href="https://www.google.com/webmasters/tools/home?hl=fr">Google webmaster tools</a>)</li>
  <li><strong>1 seconde</strong> (65%) sur le temps avant le 1er clic</li>
  <li>une <em>sensation</em> de vitesse et de fluidité qu'il n'y avait pas avant, car le HTML et quelques images se chargent en moins d'une seconde et il y a moins de pointe de charge CPU</li>
  <li>des <strong>places dans le classement Google</strong> ? Plusieurs semaines après, en vérifiant notre position pour certains mots clés dans Google nous nous sommes rendu compte qu'on avait gagné des places, parfois plusieurs pages. Difficile d'être sur à 100% que cela vient de là, mais aucun action SEO ou marketing n'avait été mise en place durant cette période.</li>
</ul>
<h1>Génial, je m'y met</h1>
Il y a des inconvénients et certaines choses à prendre en compte :
<ul>
  <li>si il y a une <strong>erreur</strong> dans vos scripts, votre debuguer vous indiquera comme numéro de ligne celui de <em>l'eval</em>. Je vous conseille donc de réserver cette technique pour la production, et non pour votre environnement de développement.</li>
  <li><strong>document.write() ne marchera pas</strong> : il s'exécutera en bas de page ou pire s'exécutera 2 fois. Si vous affichez de la publicité, il est probable que votre régie utilise document.write(). Il n'y a rien à faire à part faire l'appel de la pub tout en bas, puis déplacer la div container au bon endroit, ce qui est excellent pour la perf de manière générale</li>
  <li>si vous comptiez sur JS pour afficher de la publicité ou un widget facebook, cela se fera plus tard qu'actuellement. L'affichage en est d'ailleurs accéléré et <strong>se passe sans freeze</strong> car le DOM n'est pas modifié alors qu'il est en train de se charger. Mais j'ai déjà vu des commerciaux protester contre ce genre de développement qui accélère l'affichage mais qui rendrait la publicité moins visible. A ce sentiment il vous faut opposer <a href="http://www.slideshare.net/stoyan/the-business-of-performance">des faits</a> : la performance perçue rapporte réellement de l'argent, plus qu'une publicité qui s'affiche en retard.</li>
  <li>il faut avoir développé préalablement en "<strong>non obstrusive javascript</strong>", pour que l'utilisateur puisse accéder aux fonctionalités si il clique avant que le JS n'arrive. Exemple : videz le cache et allez cliquer très vite sur le lien "login" en haut à droite. Vous suivrez un lien si JS n'est pas encore là, alors que vous ouvrirez une fenêtre JS avec le même module de login si il est arrivé.</li>
  <li>certains vous diront par réflexe qu'<strong>eval is evil</strong>, mais en l'occurrence vous exécutez le code d'une source en laquelle vous faîtes déjà confiance : votre HTML. Les risques de XSS ne sont donc pas plus élevés qu'avant (mais corrigez moi si je me trompe, parce que j'ai déjà mis ça en production ...)</li>
  <li>si votre HTML est plus long à s'afficher entièrement que le JS à télécharger (résultat de recherche, page très lourde, très mauvaise optimisation ...), alors il vaut mieux garder votre JS dans le &lt;<em>head</em>&gt;, envoyer rapidement les parties de HTML déjà calculées (au moins la partie &lt;<em>head</em>&gt;, pour commencer ASAP le téléchargement JS/CSS). De cette manière l'utilisateur pourra déjà commencer à interagir avec la page, parties JS comprises, avant même que le HTML soit entièrement calculé</li>
</ul>
Si vous voyez d'autres limites, j'attend vos commentaires
<h1>D'autres techniques ?</h1>
<p style="text-align: left;">Facebook et Google Analytics ont développé des techniques particulières pour exécuter du code alors qu'il n'est pas forcément encore téléchargé.</p>
<p style="text-align: left;">Google analytics utilise dans sa <a href="http://code.google.com/intl/fr/apis/analytics/docs/tracking/asyncTracking.html" target="_blank">version asynchrone</a> une astuce tirant parti de la versatilité de JS. Un Array est déclaré et le webmaster utilise .<em>push</em>() en lui passant le nom et les paramètres des méthodes à appeler. Lorsque le fichier ga.js arrive, celui ci remplace le tableau par une classe, <strong>exécute toutes les commandes demandées auparavant</strong> et .<em>push</em>() sert maintenant à exécuter directement les méthodes.</p>
<p style="text-align: left;">Facebook <a href="http://ajaxian.com/archives/facebook-javascript-jsconf">pour sa part</a> a expliqué que pour passer de 5s à 2.5s avant le 1er clic, ils ont du faire du très spécifique : ils déclarent en haut de page un petit listener JS, le reste du JS étant en bas de page (145Ko en 16 requêtes). Si l'utilisateur clique vite, ce petit code ouvre une popup JS qui va chercher sur le serveur le HTML et le JS a exécuter.</p>
<p style="text-align: left;">Dans ces 2 cas, décaler JS en bas de page demandait à changer sa manière de programmer, ce qui fait partie des choses que je voulais éviter. La <strong>technique du mute+eval</strong> est exactement adaptée à la problématique que j'avais, aussi je serais curieux de voir ses limites sur d'autres types de pages, ou au contraire si elle peut s'adapter chez vous aussi</p>
